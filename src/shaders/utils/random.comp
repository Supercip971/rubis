#ifndef RANDOM_COMP
#define RANDOM_COMP

layout(std140, binding = 1) readonly uniform UniformBufferObjectRandom
{
    float width;
    float height;
    uint t;
    vec4 camera_pos;

    vec4 camera_target;
    vec4 camera_up;
}
rubo;

struct RandomResult
{
    uvec2 state;
    uint value;
};
float rand(vec2 co)
{
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);
}

RandomResult fast_rand(uvec2 state, vec2 state2)
{
    uint s1 = state.x + int(state2.x);
    uint s0 = state.y + int(state2.y);
    /* uint r = (s0 + s1) * (uint(rubo.t + 16) * 8);
     state.x = s0 ^ (((int(sin(rubo.t / 10.f) * 100))));
     s1 ^= s1 << 11;
     state.y = s1 ^ s0 ^ (s1 >> 9) ^ (s0 >> 5);
 */

    s1 ^= s1 << 16;
    s1 ^= s1 >> 5;
    s1 ^= s1 << 1;

    RandomResult result;
    result.state = uvec2(s1, s0);
    result.value = s1;
    return result;
}

uvec2 seed = uvec2(0);
bool loaded = false;
vec2 state2 = vec2(0);
void seed_random_init(vec2 v)
{
    seed.xy = uvec2(2419050644 * ((rubo.t + 1) * 69), 343247216 * ((rubo.t + 1) * 69));

    //   seed.y = float(rubo.t) * 13.f + 256.f;
}
void random_init(vec2 v)
{
    state2 = v * 64 + vec2(v.x * v.y, int(v.y * v.x) ^ int(v.y));

    seed_random_init(v);
}

float random()
{
    RandomResult r = fast_rand(seed, state2);
    seed = r.state;
    return float(r.value / 4294967296);
}
#endif
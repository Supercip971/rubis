#ifndef VEC_COMP
#define VEC_COMP
#include "utils/random.comp"
float squared_len(vec3 v)
{
    return v.x * v.x + v.y * v.y + v.z * v.z;
}
vec3 vec_unit(vec3 v)
{
    return normalize(v);
}

vec3 vec3_random()
{
    return (vec3(random(), random(), random()) * 2.f) - vec3(1.0f);
}

float vec3_min_comp(vec3 v)
{
    return min(v.x, min(v.y, v.z));
}
float vec3_max_comp(vec3 v)
{
    return max(v.x, max(v.y, v.z));
}
vec3 vec3_random_insphere()
{

    vec3 v = vec3_random();
    if (squared_len(v) > 1.0f)
    {
        v = vec_unit(v);
    }
    return v;
}

vec3 vec3_random_unit()
{
    return vec_unit(vec3_random());
}

vec3 random_in_hemisphere(vec3 normal)
{
    vec3 in_unit_sphere = vec3_random_unit();
    if (dot(in_unit_sphere, normal) <= 0.0)
    {
        return -in_unit_sphere;
    }
    
    return  in_unit_sphere;
}

bool is_vec_near_zero(vec3 v)
{
    return abs(v.x) < 0.000001 && abs(v.y) < 0.000001 && abs(v.z) < 0.000001;
}

vec3 vec_reflect(vec3 v, vec3 n)
{
    return reflect(v, n);
}

vec3 vec_refract(vec3 uv, vec3 n, float etai_over_etat)
{
    /*
    float cos_theta = min(dot(-uv, n), 1.0);
    vec3 r_out_perp = etai_over_etat * (uv + cos_theta * n);
    vec3 r_out_parallel = -sqrt(abs(1 - squared_len(r_out_perp))) * n;
    return r_out_perp + r_out_parallel;*/
    return refract(uv, n, etai_over_etat);
}

float reflectance(float cosine, float ref_idx)
{
    float ro = (1.0 - ref_idx) / (1.0 + ref_idx);
    ro = ro * ro;
    return ro + (1.0 - ro) * pow((1.0 - cosine), 5.0);
}
vec3 vec3_random_unit_in_disk()
{
    vec3 v = vec3(random(), random(), 0.5f) * 2.0 - vec3(1.0);
    if (squared_len(v) <= 1.0f)
    {
        v = vec_unit(v);
    }
    return v;
}
#endif